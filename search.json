[
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Example Gallery",
    "section": "",
    "text": "Making accessible data representation with maidr is easy and straightforward. If you already have data visualization code using matplotlib or seaborn, you can make your plots accessible with maidr in just a few lines of code.\nSimply import the maidr package and use the maidr.show() function to display your plots. maidr will automatically generate accessible versions of your plots in your default browser. You can then interact with the accessible versions using keyboard shortcuts (refer to TableÂ 1).\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Just import maidr package \nimport maidr  \n\n\n# Load the penguins dataset\npenguins = sns.load_dataset(\"penguins\")\n\n# Create a bar plot showing the average body mass of penguins by species\nplt.figure(figsize=(6, 6))\n\n# Assign the plot to a variable \nbar_plot = sns.barplot(  \n    x=\"species\", y=\"body_mass_g\", data=penguins, errorbar=\"sd\", palette=\"Blues_d\"\n)\nplt.title(\"Average Body Mass of Penguins by Species\")\nplt.xlabel(\"Species\")\nplt.ylabel(\"Body Mass (g)\")\n\n# plt.show()\n\n# Use maidr.show() to display your plot \nmaidr.show(bar_plot)  \n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n# Load the Titanic dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Create a count plot\nplt.figure(figsize=(6, 6))\ncount_plot = sns.countplot(x=\"class\", data=titanic, palette=\"viridis\") \n\nplt.title(\"Passenger Class Distribution on the Titanic\")\nplt.xlabel(\"Passenger Class\")\nplt.ylabel(\"Count\")\n\n# plt.show()\nmaidr.show(count_plot) \n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport maidr \n\nspecies = (\n    \"Adelie\",\n    \"Chinstrap\",\n    \"Gentoo\",\n)\nweight_counts = {\n    \"Below\": np.array([70, 31, 58]),\n    \"Above\": np.array([82, 37, 66]),\n}\nwidth = 0.5\n\nfig, ax = plt.subplots()\n\nbottom = np.zeros(3)\n\nfor boolean, weight_count in weight_counts.items():\n    p = ax.bar(species, weight_count, width, label=boolean, bottom=bottom) \n    bottom += weight_count\n\nax.set_xlabel(\"Species of Penguins\")\nax.set_ylabel(\"Average Body Mass\")\n\nax.set_title(\"Number of penguins with above average body mass\")\nax.legend(loc=\"upper right\")\n\nmaidr.show(p) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport maidr \n\nspecies: tuple[str, str, str] = (\n    \"Adelie\",\n    \"Chinstrap\",\n    \"Gentoo\",\n)\nweight_counts: dict[str, np.ndarray] = {\n    \"Below\": np.array([70, 31, 58]),\n    \"Above\": np.array([82, 37, 66]),\n}\n\nx: np.ndarray = np.arange(len(species))\ntotal_groups: int = len(weight_counts)\nwidth: float = 0.35\n\nfig, ax = plt.subplots() \n\noffsets: list[float] = [(-width / 2) + i * width for i in range(total_groups)]\n\nfor offset, (category, counts) in zip(offsets, weight_counts.items()):\n    positions = x + offset\n    p = ax.bar(positions, counts, width, label=category) \n\n# Set x-axis labels and title\nax.set_xticks(x)\nax.set_xticklabels(species)\nax.set_xlabel(\"Species\")\nax.set_title(\"Dodged Bar Plot: Penguin Weight Counts\")\nax.legend(loc=\"upper right\")\n\n# Show plot using maidr.show\nmaidr.show(p) \n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n\n# Load the Iris dataset\niris = sns.load_dataset(\"iris\")\n\n# Select the petal lengths\npetal_lengths = iris[\"petal_length\"]\n\n# Plot a histogram of the petal lengths\nplt.figure(figsize=(6, 6))\n\nhist_plot = sns.histplot(petal_lengths, kde=True, color=\"blue\", binwidth=0.5) \n\nplt.title(\"Petal Lengths in Iris Dataset\")\nplt.xlabel(\"Petal Length (cm)\")\nplt.ylabel(\"Frequency\")\n\n# plt.show()\nmaidr.show(hist_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport maidr \n\n# Generate sample data\nnp.random.seed(42)\ndata = np.random.randn(500)\n\n# Create a KDE plot\nplt.figure(figsize=(6, 6))\nkde_plot = sns.kdeplot(data, fill=True, color=\"blue\") \n\nplt.title(\"KDE Plot of Random Data\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Density\")\n\n# plt.show()\nmaidr.show(kde_plot) \n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n\n# Load the 'tips' dataset from seaborn\ntips = sns.load_dataset(\"tips\") \n\n# Choose a specific subset of the dataset (e.g., data for 'Thursday')\nsubset_data = tips[tips[\"day\"] == \"Thur\"]\n\n# Create a line plot\nplt.figure(figsize=(6, 6))\nline_plot = sns.lineplot( \n    data=subset_data,\n    x=\"total_bill\",\n    y=\"tip\",\n    markers=True,\n    style=\"day\",\n    legend=False,\n)\nplt.title(\"Tips vs Total Bill (Thursday)\")\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\n\n# plt.show()\nmaidr.show(line_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport maidr \n# Create sample data points\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2, 4, 1, 5, 3, 7, 6, 8])\ny2 = np.array([1, 3, 5, 2, 4, 6, 8, 7])\ny3 = np.array([3, 1, 4, 6, 5, 2, 4, 5])\n\n# Convert to pandas DataFrame for seaborn\ndata = pd.DataFrame(\n    {\n        \"x\": np.tile(x, 3),\n        \"y\": np.concatenate([y1, y2, y3]),\n        \"series\": np.repeat([\"Series 1\", \"Series 2\", \"Series 3\"], len(x)),\n    }\n)\n\n# Create the plot\nplt.figure(figsize=(6, 6))\n\n# Use seaborn lineplot for multiple lines\nlineplot = sns.lineplot(\n    x=\"x\", y=\"y\", hue=\"series\", style=\"series\", markers=True, dashes=True, data=data\n)\n\n# Customize the plot\nplt.title(\"Seaborn Multiline Plot\")\nplt.xlabel(\"X values\")\nplt.ylabel(\"Y values\")\n\n# Display the plot using maidr\nmaidr.show(lineplot) \n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n# Load an example dataset from seaborn\nglue = sns.load_dataset(\"glue\").pivot(index=\"Model\", columns=\"Task\", values=\"Score\")\n\n# Plot a heatmap\nplt.figure(figsize=(8, 8))\nheatmap = sns.heatmap(glue, annot=True, fill_label=\"Score\") \nplt.title(\"Model Scores by Task\")\n\n# Show the plot\n# plt.show()\nmaidr.show(heatmap) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom seaborn import load_dataset\n\nimport maidr \n\n# Load the iris dataset\niris = load_dataset(\"iris\")\n\n# Create the horizontal boxplot\nhorz_box_plot = sns.boxplot(x=\"petal_length\", y=\"species\", data=iris, orient=\"h\") \nplt.ylabel(\"Species\")\nplt.xlabel(\"Petal Length\")\nplt.title(\"Petal Length by Species from Iris Dataset\")\n# plt.show()\n\n# Show the plot\nmaidr.show(horz_box_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n# Create a scatter plot\nscatter_plot = sns.scatterplot( \n    data=iris, x=\"sepal_length\", y=\"sepal_width\", hue=\"species\"\n)\n\n# Adding title and labels (optional)\nplt.title(\"Iris Sepal Length vs Sepal Width\")\nplt.xlabel(\"Sepal Length\")\nplt.ylabel(\"Sepal Width\")\n\n# Show the plot\n# plt.show()\nmaidr.show(scatter_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport maidr \n\n# Generate sample data\nnp.random.seed(42)\nx = np.linspace(0, 10, 50)\ny = 2 * x + 1 + np.random.normal(0, 2, 50)\n\n# Create a regression plot\nplt.figure(figsize=(6, 6))\nreg_plot = sns.regplot(\n    x=x,\n    y=y,\n    scatter_kws={\"s\": 50, \"alpha\": 0.7},\n    line_kws={\"color\": \"red\", \"lw\": 2},\n) \n\nplt.title(\"Regression Plot with Fitted Line\")\nplt.xlabel(\"X values\")\nplt.ylabel(\"Y values\")\n\n# plt.show()\nmaidr.show(reg_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport maidr \n\n# Generate sample data\nx = np.arange(5)\nbar_data = np.array([3, 5, 2, 7, 3])\nline_data = np.array([10, 8, 12, 14, 9])\n\n# Create a figure and a set of subplots\nfig, ax1 = plt.subplots(figsize=(8, 5)) \n\n# Create the bar chart on the first y-axis\nax1.bar(x, bar_data, color=\"skyblue\", label=\"Bar Data\")\nax1.set_xlabel(\"X values\")\nax1.set_ylabel(\"Bar values\", color=\"blue\")\nax1.tick_params(axis=\"y\", labelcolor=\"blue\")\n\n# Create a second y-axis sharing the same x-axis\nax2 = ax1.twinx()\n\n# Create the line chart on the second y-axis\nax2.plot(x, line_data, color=\"red\", marker=\"o\", linestyle=\"-\", label=\"Line Data\")\nax2.set_xlabel(\"X values\")\nax2.set_ylabel(\"Line values\", color=\"red\")\nax2.tick_params(axis=\"y\", labelcolor=\"red\")\n\n# Add title and legend\nplt.title(\"Multilayer Plot Example\")\n\n# Add legends for both axes\nlines1, labels1 = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines1 + lines2, labels1 + labels2, loc=\"upper left\")\n\n# Adjust layout\nfig.tight_layout()\n\nmaidr.show(fig) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nimport maidr \n\n# Set the plotting style\nsns.set_theme(style=\"whitegrid\")\n\n# Data for line plot\nx_line = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ny_line = np.array([2, 4, 1, 5, 3, 7, 6, 8])\nline_data = {\"x\": x_line, \"y\": y_line}\n\n# Data for first bar plot\ncategories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nvalues = np.random.rand(5) * 10\nbar_data = {\"categories\": categories, \"values\": values}\n\n# Data for second bar plot\ncategories_2 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nvalues_2 = np.random.randn(5) * 100\nbar_data_2 = {\"categories\": categories_2, \"values\": values_2}\n\n# Create a figure with 3 subplots arranged vertically\nfig, axs = plt.subplots(3, 1, figsize=(6, 12)) \n\n# First panel: Line plot using seaborn\nsns.lineplot(x=\"x\", y=\"y\", data=line_data, color=\"blue\", linewidth=2, ax=axs[0])\naxs[0].set_title(\"Line Plot: Random Data\")\naxs[0].set_xlabel(\"X-axis\")\naxs[0].set_ylabel(\"Values\")\n\n# Second panel: Bar plot using seaborn\nsns.barplot(\n    x=\"categories\", y=\"values\", data=bar_data, color=\"green\", alpha=0.7, ax=axs[1]\n)\naxs[1].set_title(\"Bar Plot: Random Values\")\naxs[1].set_xlabel(\"Categories\")\naxs[1].set_ylabel(\"Values\")\n\n# Third panel: Bar plot using seaborn\nsns.barplot(\n    x=\"categories\", y=\"values\", data=bar_data_2, color=\"blue\", alpha=0.7, ax=axs[2]\n)\naxs[2].set_title(\"Bar Plot 2: Random Values\")  # Fixed the typo in the title\naxs[2].set_xlabel(\"Categories\")\naxs[2].set_ylabel(\"Values\")\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the figure\nmaidr.show(fig) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport maidr \n\ncategories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\nnp.random.seed(42)\ndata_group1 = np.random.rand(5) * 10\ndata_group2 = np.random.rand(5) * 100\ndata_group3 = np.random.rand(5) * 36\ndata_group4 = np.random.rand(5) * 42\n\ndata_sets = [data_group1, data_group2, data_group3, data_group4]\ncondition_names = [\"Group 1\", \"Group 2\", \"Group 3\", \"Group 4\"]\n\nfig, axs = plt.subplots(2, 2, figsize=(7, 7), sharey=True, sharex=True)\naxs = axs.flatten()\n\nall_data = np.concatenate(data_sets)\ny_min, y_max = np.min(all_data) * 0.9, np.max(all_data) * 1.1\n\n# Create a bar plot in each subplot\nfor i, (data, condition) in enumerate(zip(data_sets, condition_names)):\n    axs[i].bar(categories, data, color=f\"C{i}\", alpha=0.7)\n    axs[i].set_title(f\"{condition}\")\n    axs[i].set_ylim(y_min, y_max)  # Set consistent y-axis limits\n\n    # Add value labels on top of each bar\n    for j, value in enumerate(data):\n        axs[i].text(\n            j,\n            value + (y_max - y_min) * 0.02,\n            f\"{value:.1f}\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=9,\n        )\n\n# Add common labels\nfig.text(0.5, 0.04, \"Categories\", ha=\"center\", va=\"center\", fontsize=14)\nfig.text(\n    0.06, 0.5, \"Values\", ha=\"center\", va=\"center\", rotation=\"vertical\", fontsize=14\n)\n\n# Add a common title\nfig.suptitle(\"Facet Plot: Bar Charts by Condition\", fontsize=16)\n\n# Adjust layout\nplt.tight_layout(rect=(0.08, 0.08, 0.98, 0.95))\n\nmaidr.show(fig) \n\n\n\n\n\n\n\n\nimport mplfinance as mpf\nimport pandas as pd\n\nimport maidr \n\n# Load the sample data\ndaily = pd.read_csv(\"../example/candle_stick/volcandat.csv\", index_col=0, parse_dates=True)\n\n# Create the candlestick chart with moving averages and volume\nfig, ax = mpf.plot(\n    daily,\n    type=\"candle\",\n    volume=True,\n    mav = (3,6,9),\n    returnfig=True,\n    ylabel=\"Price ($)\",\n    ylabel_lower=\"Volume\",\n    xlabel=\"Date\",\n    title=\"Stock Price with Volume\",\n)  \nfig.tight_layout()\n\n# Display with maidr\nmaidr.show(fig)"
  },
  {
    "objectID": "examples.html#sec-examples",
    "href": "examples.html#sec-examples",
    "title": "Example Gallery",
    "section": "",
    "text": "Making accessible data representation with maidr is easy and straightforward. If you already have data visualization code using matplotlib or seaborn, you can make your plots accessible with maidr in just a few lines of code.\nSimply import the maidr package and use the maidr.show() function to display your plots. maidr will automatically generate accessible versions of your plots in your default browser. You can then interact with the accessible versions using keyboard shortcuts (refer to TableÂ 1).\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Just import maidr package \nimport maidr  \n\n\n# Load the penguins dataset\npenguins = sns.load_dataset(\"penguins\")\n\n# Create a bar plot showing the average body mass of penguins by species\nplt.figure(figsize=(6, 6))\n\n# Assign the plot to a variable \nbar_plot = sns.barplot(  \n    x=\"species\", y=\"body_mass_g\", data=penguins, errorbar=\"sd\", palette=\"Blues_d\"\n)\nplt.title(\"Average Body Mass of Penguins by Species\")\nplt.xlabel(\"Species\")\nplt.ylabel(\"Body Mass (g)\")\n\n# plt.show()\n\n# Use maidr.show() to display your plot \nmaidr.show(bar_plot)  \n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n# Load the Titanic dataset\ntitanic = sns.load_dataset(\"titanic\")\n\n# Create a count plot\nplt.figure(figsize=(6, 6))\ncount_plot = sns.countplot(x=\"class\", data=titanic, palette=\"viridis\") \n\nplt.title(\"Passenger Class Distribution on the Titanic\")\nplt.xlabel(\"Passenger Class\")\nplt.ylabel(\"Count\")\n\n# plt.show()\nmaidr.show(count_plot) \n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport maidr \n\nspecies = (\n    \"Adelie\",\n    \"Chinstrap\",\n    \"Gentoo\",\n)\nweight_counts = {\n    \"Below\": np.array([70, 31, 58]),\n    \"Above\": np.array([82, 37, 66]),\n}\nwidth = 0.5\n\nfig, ax = plt.subplots()\n\nbottom = np.zeros(3)\n\nfor boolean, weight_count in weight_counts.items():\n    p = ax.bar(species, weight_count, width, label=boolean, bottom=bottom) \n    bottom += weight_count\n\nax.set_xlabel(\"Species of Penguins\")\nax.set_ylabel(\"Average Body Mass\")\n\nax.set_title(\"Number of penguins with above average body mass\")\nax.legend(loc=\"upper right\")\n\nmaidr.show(p) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport maidr \n\nspecies: tuple[str, str, str] = (\n    \"Adelie\",\n    \"Chinstrap\",\n    \"Gentoo\",\n)\nweight_counts: dict[str, np.ndarray] = {\n    \"Below\": np.array([70, 31, 58]),\n    \"Above\": np.array([82, 37, 66]),\n}\n\nx: np.ndarray = np.arange(len(species))\ntotal_groups: int = len(weight_counts)\nwidth: float = 0.35\n\nfig, ax = plt.subplots() \n\noffsets: list[float] = [(-width / 2) + i * width for i in range(total_groups)]\n\nfor offset, (category, counts) in zip(offsets, weight_counts.items()):\n    positions = x + offset\n    p = ax.bar(positions, counts, width, label=category) \n\n# Set x-axis labels and title\nax.set_xticks(x)\nax.set_xticklabels(species)\nax.set_xlabel(\"Species\")\nax.set_title(\"Dodged Bar Plot: Penguin Weight Counts\")\nax.legend(loc=\"upper right\")\n\n# Show plot using maidr.show\nmaidr.show(p) \n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n\n# Load the Iris dataset\niris = sns.load_dataset(\"iris\")\n\n# Select the petal lengths\npetal_lengths = iris[\"petal_length\"]\n\n# Plot a histogram of the petal lengths\nplt.figure(figsize=(6, 6))\n\nhist_plot = sns.histplot(petal_lengths, kde=True, color=\"blue\", binwidth=0.5) \n\nplt.title(\"Petal Lengths in Iris Dataset\")\nplt.xlabel(\"Petal Length (cm)\")\nplt.ylabel(\"Frequency\")\n\n# plt.show()\nmaidr.show(hist_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport maidr \n\n# Generate sample data\nnp.random.seed(42)\ndata = np.random.randn(500)\n\n# Create a KDE plot\nplt.figure(figsize=(6, 6))\nkde_plot = sns.kdeplot(data, fill=True, color=\"blue\") \n\nplt.title(\"KDE Plot of Random Data\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Density\")\n\n# plt.show()\nmaidr.show(kde_plot) \n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n\n# Load the 'tips' dataset from seaborn\ntips = sns.load_dataset(\"tips\") \n\n# Choose a specific subset of the dataset (e.g., data for 'Thursday')\nsubset_data = tips[tips[\"day\"] == \"Thur\"]\n\n# Create a line plot\nplt.figure(figsize=(6, 6))\nline_plot = sns.lineplot( \n    data=subset_data,\n    x=\"total_bill\",\n    y=\"tip\",\n    markers=True,\n    style=\"day\",\n    legend=False,\n)\nplt.title(\"Tips vs Total Bill (Thursday)\")\nplt.xlabel(\"Total Bill\")\nplt.ylabel(\"Tip\")\n\n# plt.show()\nmaidr.show(line_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport maidr \n# Create sample data points\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ny1 = np.array([2, 4, 1, 5, 3, 7, 6, 8])\ny2 = np.array([1, 3, 5, 2, 4, 6, 8, 7])\ny3 = np.array([3, 1, 4, 6, 5, 2, 4, 5])\n\n# Convert to pandas DataFrame for seaborn\ndata = pd.DataFrame(\n    {\n        \"x\": np.tile(x, 3),\n        \"y\": np.concatenate([y1, y2, y3]),\n        \"series\": np.repeat([\"Series 1\", \"Series 2\", \"Series 3\"], len(x)),\n    }\n)\n\n# Create the plot\nplt.figure(figsize=(6, 6))\n\n# Use seaborn lineplot for multiple lines\nlineplot = sns.lineplot(\n    x=\"x\", y=\"y\", hue=\"series\", style=\"series\", markers=True, dashes=True, data=data\n)\n\n# Customize the plot\nplt.title(\"Seaborn Multiline Plot\")\nplt.xlabel(\"X values\")\nplt.ylabel(\"Y values\")\n\n# Display the plot using maidr\nmaidr.show(lineplot) \n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n# Load an example dataset from seaborn\nglue = sns.load_dataset(\"glue\").pivot(index=\"Model\", columns=\"Task\", values=\"Score\")\n\n# Plot a heatmap\nplt.figure(figsize=(8, 8))\nheatmap = sns.heatmap(glue, annot=True, fill_label=\"Score\") \nplt.title(\"Model Scores by Task\")\n\n# Show the plot\n# plt.show()\nmaidr.show(heatmap) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom seaborn import load_dataset\n\nimport maidr \n\n# Load the iris dataset\niris = load_dataset(\"iris\")\n\n# Create the horizontal boxplot\nhorz_box_plot = sns.boxplot(x=\"petal_length\", y=\"species\", data=iris, orient=\"h\") \nplt.ylabel(\"Species\")\nplt.xlabel(\"Petal Length\")\nplt.title(\"Petal Length by Species from Iris Dataset\")\n# plt.show()\n\n# Show the plot\nmaidr.show(horz_box_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport maidr \n\n# Create a scatter plot\nscatter_plot = sns.scatterplot( \n    data=iris, x=\"sepal_length\", y=\"sepal_width\", hue=\"species\"\n)\n\n# Adding title and labels (optional)\nplt.title(\"Iris Sepal Length vs Sepal Width\")\nplt.xlabel(\"Sepal Length\")\nplt.ylabel(\"Sepal Width\")\n\n# Show the plot\n# plt.show()\nmaidr.show(scatter_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nimport maidr \n\n# Generate sample data\nnp.random.seed(42)\nx = np.linspace(0, 10, 50)\ny = 2 * x + 1 + np.random.normal(0, 2, 50)\n\n# Create a regression plot\nplt.figure(figsize=(6, 6))\nreg_plot = sns.regplot(\n    x=x,\n    y=y,\n    scatter_kws={\"s\": 50, \"alpha\": 0.7},\n    line_kws={\"color\": \"red\", \"lw\": 2},\n) \n\nplt.title(\"Regression Plot with Fitted Line\")\nplt.xlabel(\"X values\")\nplt.ylabel(\"Y values\")\n\n# plt.show()\nmaidr.show(reg_plot) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport maidr \n\n# Generate sample data\nx = np.arange(5)\nbar_data = np.array([3, 5, 2, 7, 3])\nline_data = np.array([10, 8, 12, 14, 9])\n\n# Create a figure and a set of subplots\nfig, ax1 = plt.subplots(figsize=(8, 5)) \n\n# Create the bar chart on the first y-axis\nax1.bar(x, bar_data, color=\"skyblue\", label=\"Bar Data\")\nax1.set_xlabel(\"X values\")\nax1.set_ylabel(\"Bar values\", color=\"blue\")\nax1.tick_params(axis=\"y\", labelcolor=\"blue\")\n\n# Create a second y-axis sharing the same x-axis\nax2 = ax1.twinx()\n\n# Create the line chart on the second y-axis\nax2.plot(x, line_data, color=\"red\", marker=\"o\", linestyle=\"-\", label=\"Line Data\")\nax2.set_xlabel(\"X values\")\nax2.set_ylabel(\"Line values\", color=\"red\")\nax2.tick_params(axis=\"y\", labelcolor=\"red\")\n\n# Add title and legend\nplt.title(\"Multilayer Plot Example\")\n\n# Add legends for both axes\nlines1, labels1 = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines1 + lines2, labels1 + labels2, loc=\"upper left\")\n\n# Adjust layout\nfig.tight_layout()\n\nmaidr.show(fig) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nimport maidr \n\n# Set the plotting style\nsns.set_theme(style=\"whitegrid\")\n\n# Data for line plot\nx_line = np.array([1, 2, 3, 4, 5, 6, 7, 8])\ny_line = np.array([2, 4, 1, 5, 3, 7, 6, 8])\nline_data = {\"x\": x_line, \"y\": y_line}\n\n# Data for first bar plot\ncategories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nvalues = np.random.rand(5) * 10\nbar_data = {\"categories\": categories, \"values\": values}\n\n# Data for second bar plot\ncategories_2 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\nvalues_2 = np.random.randn(5) * 100\nbar_data_2 = {\"categories\": categories_2, \"values\": values_2}\n\n# Create a figure with 3 subplots arranged vertically\nfig, axs = plt.subplots(3, 1, figsize=(6, 12)) \n\n# First panel: Line plot using seaborn\nsns.lineplot(x=\"x\", y=\"y\", data=line_data, color=\"blue\", linewidth=2, ax=axs[0])\naxs[0].set_title(\"Line Plot: Random Data\")\naxs[0].set_xlabel(\"X-axis\")\naxs[0].set_ylabel(\"Values\")\n\n# Second panel: Bar plot using seaborn\nsns.barplot(\n    x=\"categories\", y=\"values\", data=bar_data, color=\"green\", alpha=0.7, ax=axs[1]\n)\naxs[1].set_title(\"Bar Plot: Random Values\")\naxs[1].set_xlabel(\"Categories\")\naxs[1].set_ylabel(\"Values\")\n\n# Third panel: Bar plot using seaborn\nsns.barplot(\n    x=\"categories\", y=\"values\", data=bar_data_2, color=\"blue\", alpha=0.7, ax=axs[2]\n)\naxs[2].set_title(\"Bar Plot 2: Random Values\")  # Fixed the typo in the title\naxs[2].set_xlabel(\"Categories\")\naxs[2].set_ylabel(\"Values\")\n\n# Adjust layout to prevent overlap\nplt.tight_layout()\n\n# Display the figure\nmaidr.show(fig) \n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport maidr \n\ncategories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\nnp.random.seed(42)\ndata_group1 = np.random.rand(5) * 10\ndata_group2 = np.random.rand(5) * 100\ndata_group3 = np.random.rand(5) * 36\ndata_group4 = np.random.rand(5) * 42\n\ndata_sets = [data_group1, data_group2, data_group3, data_group4]\ncondition_names = [\"Group 1\", \"Group 2\", \"Group 3\", \"Group 4\"]\n\nfig, axs = plt.subplots(2, 2, figsize=(7, 7), sharey=True, sharex=True)\naxs = axs.flatten()\n\nall_data = np.concatenate(data_sets)\ny_min, y_max = np.min(all_data) * 0.9, np.max(all_data) * 1.1\n\n# Create a bar plot in each subplot\nfor i, (data, condition) in enumerate(zip(data_sets, condition_names)):\n    axs[i].bar(categories, data, color=f\"C{i}\", alpha=0.7)\n    axs[i].set_title(f\"{condition}\")\n    axs[i].set_ylim(y_min, y_max)  # Set consistent y-axis limits\n\n    # Add value labels on top of each bar\n    for j, value in enumerate(data):\n        axs[i].text(\n            j,\n            value + (y_max - y_min) * 0.02,\n            f\"{value:.1f}\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontsize=9,\n        )\n\n# Add common labels\nfig.text(0.5, 0.04, \"Categories\", ha=\"center\", va=\"center\", fontsize=14)\nfig.text(\n    0.06, 0.5, \"Values\", ha=\"center\", va=\"center\", rotation=\"vertical\", fontsize=14\n)\n\n# Add a common title\nfig.suptitle(\"Facet Plot: Bar Charts by Condition\", fontsize=16)\n\n# Adjust layout\nplt.tight_layout(rect=(0.08, 0.08, 0.98, 0.95))\n\nmaidr.show(fig) \n\n\n\n\n\n\n\n\nimport mplfinance as mpf\nimport pandas as pd\n\nimport maidr \n\n# Load the sample data\ndaily = pd.read_csv(\"../example/candle_stick/volcandat.csv\", index_col=0, parse_dates=True)\n\n# Create the candlestick chart with moving averages and volume\nfig, ax = mpf.plot(\n    daily,\n    type=\"candle\",\n    volume=True,\n    mav = (3,6,9),\n    returnfig=True,\n    ylabel=\"Price ($)\",\n    ylabel_lower=\"Volume\",\n    xlabel=\"Date\",\n    title=\"Stock Price with Volume\",\n)  \nfig.tight_layout()\n\n# Display with maidr\nmaidr.show(fig)"
  },
  {
    "objectID": "examples.html#reactive-dashboard",
    "href": "examples.html#reactive-dashboard",
    "title": "Example Gallery",
    "section": "Reactive Dashboard",
    "text": "Reactive Dashboard\n\nShiny\nCheck out a reactive Shiny dashboard example with maidr and its source code is available on GitHub.\n\n\nStreamlit\nCheck out this Streamlit dashboard with maidr, and its source code is available on GitHub.\n* Note: `Streamlit` framework has some \"Unlabeled 0 Button\" which does not have to do with our maidr package. This issue needs to be addressed by the `Streamlit` team."
  },
  {
    "objectID": "examples.html#interactive-computing-jupyter-notebooks-jupyter-labs-google-colab",
    "href": "examples.html#interactive-computing-jupyter-notebooks-jupyter-labs-google-colab",
    "title": "Example Gallery",
    "section": "Interactive Computing (Jupyter Notebooks, Jupyter Labs, Google Colab)",
    "text": "Interactive Computing (Jupyter Notebooks, Jupyter Labs, Google Colab)\nCheck out this interactive notebook in Google Colab."
  },
  {
    "objectID": "examples.html#other-examples",
    "href": "examples.html#other-examples",
    "title": "Example Gallery",
    "section": "Other Examples",
    "text": "Other Examples\nWe provide some example code for using py-maidr with matplotlib, seaborn, Jupyter Notebook, Quarto, Shiny, and Streamlit."
  },
  {
    "objectID": "examples.html#keyboard-shortcuts-and-controls",
    "href": "examples.html#keyboard-shortcuts-and-controls",
    "title": "Example Gallery",
    "section": "Keyboard Shortcuts and Controls",
    "text": "Keyboard Shortcuts and Controls\nTo interact with the plots using maidr, follow these steps:\n\nPress the Tab key to focus on the plot element.\nUse the arrow keys to move around the plot.\nPress B to toggle Braille mode.\nPress T to toggle Text mode.\nPress S to toggle Sonification (tones) mode.\nPress R to toggle Review mode.\n\nBelow is a detailed list of keyboard shortcuts for various functions:\n\n\n\nTableÂ 1: Keyboard Shortcuts\n\n\n\n\n\n\n\n\n\n\nFunction\nWindows and Linux Key\nMac Key\n\n\n\n\nToggle Braille Mode\nb\nb\n\n\nToggle Text Mode\nt\nt\n\n\nToggle Sonification Mode\ns\ns\n\n\nToggle Review Mode\nr\nr\n\n\nMove around plot\nArrow keys\nArrow keys\n\n\nGo to the very left right up down\nCtrl + Arrow key\nCMD + Arrow key\n\n\nSelect the first element\nCtrl + Home\nCMD + Home\n\n\nSelect the last element\nCtrl + End\nCMD + End\n\n\nRepeat current sound\nSpace\nSpace\n\n\nAuto-play outward in direction of arrow\nCtrl + Shift + Arrow key\nCMD + Shift + Arrow key\n\n\nStop Auto-play\nCtrl\nCtrl\n\n\nAuto-play speed up\nPeriod (.)\nPeriod (.)\n\n\nAuto-play speed down\nComma (,)\nComma (,)\n\n\nAuto-play speed reset\nSlash (/)\nSlash (/)\n\n\nCheck label for the title of current plot\nl t\nl t\n\n\nCheck label for the x axis of current plot\nl x\nl x\n\n\nCheck label for the y axis of current plot\nl y\nl y\n\n\nCheck label for the fill (z) axis of current plot\nl f\nl f\n\n\nSwitch to next layer\nPageUp\nPageUp\n\n\nSwitch to previous layer\nPageDown\nPageDown\n\n\nMove around subplot list\nArrow keys\nArrow keys\n\n\nActivate selected subplot in the list\nEnter\nEnter\n\n\nEscape from current subplot to return to the subplot list\nESC\nESC\n\n\nOpen settings\nCtrl + comma (,)\nCMD + comma (,)\n\n\nOpen Chat View\nQuestion (?)\nQuestion (?)\n\n\nOpen keyboard help\nCtrl + Slash (/)\nCMD + Slash (/)"
  },
  {
    "objectID": "examples.html#demo-video",
    "href": "examples.html#demo-video",
    "title": "Example Gallery",
    "section": "Demo Video",
    "text": "Demo Video"
  },
  {
    "objectID": "examples.html#bug-report",
    "href": "examples.html#bug-report",
    "title": "Example Gallery",
    "section": "Bug Report",
    "text": "Bug Report\nIf you encounter a bug, have usage questions, or want to share ideas to make this package better, please feel free to file an issue."
  },
  {
    "objectID": "examples.html#code-of-conduct",
    "href": "examples.html#code-of-conduct",
    "title": "Example Gallery",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nPlease note that the maidr project is released with a contributor code of conduct.By participating in this project you agree to abide by its terms."
  },
  {
    "objectID": "examples.html#license",
    "href": "examples.html#license",
    "title": "Example Gallery",
    "section": "ð License",
    "text": "ð License\nmaidr is licensed under the GPL3 license.\nÂ© (x)Ability Design Lab."
  },
  {
    "objectID": "examples.html#governance",
    "href": "examples.html#governance",
    "title": "Example Gallery",
    "section": "ðï¸ Governance",
    "text": "ðï¸ Governance\nThis project is primarily maintained by JooYoung Seo and Saairam Venkatesh. Other authors may occasionally assist with some of these duties."
  },
  {
    "objectID": "api/Maidr.show.html",
    "href": "api/Maidr.show.html",
    "title": "Maidr.show",
    "section": "",
    "text": "Maidr.show(renderer='auto', clear_fig=True)\nPreview the HTML content using the specified renderer.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nrenderer\nLiteral['auto', 'ipython', 'browser']\nThe renderer to use for the HTML preview.\n\"auto\""
  },
  {
    "objectID": "api/Maidr.show.html#parameters",
    "href": "api/Maidr.show.html#parameters",
    "title": "Maidr.show",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nrenderer\nLiteral['auto', 'ipython', 'browser']\nThe renderer to use for the HTML preview.\n\"auto\""
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "API Reference",
    "section": "",
    "text": "Plots genereated by Matplotlib or Seaborn can be displayed in MAIDR format in default browser. Input plot object as an argument in maidr.show().\n\n\n\nMaidr.show\nPreview the HTML content using the specified renderer.\n\n\n\n\n\n\nSave a plot as an HTML file with maidr.save_html().\n\n\n\nMaidr.save_html\nSave the HTML representation of the figure with MAIDR to a file."
  },
  {
    "objectID": "api/index.html#displaying-an-accessible-and-interactive-plot-with-multimodal-formats",
    "href": "api/index.html#displaying-an-accessible-and-interactive-plot-with-multimodal-formats",
    "title": "API Reference",
    "section": "",
    "text": "Plots genereated by Matplotlib or Seaborn can be displayed in MAIDR format in default browser. Input plot object as an argument in maidr.show().\n\n\n\nMaidr.show\nPreview the HTML content using the specified renderer."
  },
  {
    "objectID": "api/index.html#saving-a-maidr-plot-as-an-html-file",
    "href": "api/index.html#saving-a-maidr-plot-as-an-html-file",
    "title": "API Reference",
    "section": "",
    "text": "Save a plot as an HTML file with maidr.save_html().\n\n\n\nMaidr.save_html\nSave the HTML representation of the figure with MAIDR to a file."
  },
  {
    "objectID": "api/Maidr.save_html.html",
    "href": "api/Maidr.save_html.html",
    "title": "Maidr.save_html",
    "section": "",
    "text": "Maidr.save_html(file, *, lib_dir='lib', include_version=True)\nSave the HTML representation of the figure with MAIDR to a file.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfile\nstr\nThe file to save to.\nrequired\n\n\nlib_dir\nstr\nThe directory to save the dependencies to (relative to the fileâs directory).\n\"lib\"\n\n\ninclude_version\nbool\nWhether to include the version number in the dependency folder name.\nTrue"
  },
  {
    "objectID": "api/Maidr.save_html.html#parameters",
    "href": "api/Maidr.save_html.html#parameters",
    "title": "Maidr.save_html",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nfile\nstr\nThe file to save to.\nrequired\n\n\nlib_dir\nstr\nThe directory to save the dependencies to (relative to the fileâs directory).\n\"lib\"\n\n\ninclude_version\nbool\nWhether to include the version number in the dependency folder name.\nTrue"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "maidr: Data Insight for All\nAre you eager to uncover new insights from data science but frustrated by visual-only data representations? Do you want to make your data visualizations accessible to everyone, including those who are blind or low-vision? If so, maidr is for you!\nmaidr (pronounced as âmaderâ) is an accessible framework for multimodal data representation. With maidr, blind and sighted users can easily augment data visualizations into touchable (Braille), readable (text), audible (sonification), and conversational (AI) formats.\nTo learn more about maidr framework and its scientific background, please visit the original maidr JavaScript engine repo.\nThe following summarizes the key features and design principles of Py maidr:\nOur core philosophy is to make data science accessible to everyone, regardless of their visual dis/abilities. We believe that by making data visualizations accessible, we can empower blind and sighted users to work together on data science projects, share insights, and make data-driven decisions collaboratively."
  },
  {
    "objectID": "index.html#supported-data-visualization-libraries",
    "href": "index.html#supported-data-visualization-libraries",
    "title": "Welcome",
    "section": "Supported Data Visualization Libraries",
    "text": "Supported Data Visualization Libraries\nWe currently support the following data visualization libraries in Python:, and we are working on adding support for more libraries in the future:\n\nMatplotlib\n\nOne-factor bar plot having one x (categorical) and one y (numerical/count) axis.\nStacked bar plot having one x (categorical) and one y (numerical/count) axis with multiple data series stacked vertically.\nDodged (grouped) bar plot having one x (categorical) and one y (numerical/count) axis with multiple data series displayed side-by-side.\nOne distribution histogram having one x (numerical) and y (numerical/frequency) axis.\nKDE (Kernel Density Estimation) plot having one x (numerical) and one y (density) axis showing probability density curves.\nSingle line plot having one x (numerical) and one y (numerical) axis.\nMulti-line plot having one x (numerical) and one y (numerical) axis with multiple data series on the same axes.\nVertical box plot having one x (categorical) and one y (numerical) axis.\nHorizontal box plot having one x (numerical) and one y (categorical) axis.\n\nNote: For box plots, the categorical variable can be either single-class or multi-class. We support both cases.\n\nHeatmap having one x (categorical) and one y (categorical) and z (numerical) axis.\nScatter plot having one x (numerical) and one y (numerical) axis.\nRegression plot having one x (numerical) and one y (numerical) axis with scatter points and fitted regression line.\nCandlestick chart having one x (time/date) and four y (numerical) axes (open, high, low, close) for financial data visualization (using mplfinance).\nMulti-layered plots combining different plot types on the same figure with shared axes.\nMulti-panel plots (subplots) with multiple charts in a grid layout having independent axes.\nFacet plots showing the same chart type across different data subsets with shared axis scales.\n\n\n\nSeaborn\n\nsns.barplot(): One-factor bar plot having one x (categorical) and one y (numerical/count) axis.\nsns.countplot(): Count plot having one x (categorical) and one y (count) axis showing the frequency of categorical data.\nsns.histplot(): One distribution histogram having one x (numerical) and y (numerical/frequency) axis.\nsns.kdeplot(): KDE (Kernel Density Estimation) plot having one x (numerical) and one y (density) axis showing probability density curves.\nsns.lineplot(): Single line plot having one x (numerical) and one y (numerical) axis.\nsns.boxplot(..., orient=\"v\"): Vertical box plot having one x (categorical) and one y (numerical) axis.\nsns.boxplot(..., orient=\"h\"): Horizontal box plot having one x (numerical) and one y (categorical) axis.\n\nNote: For box plots, the categorical variable can be either single-class or multi-class. We support both cases.\n\nsns.heatmap(): Heatmap having one x (categorical) and one y (categorical) and z (numerical) axis.\nsns.scatterplot(): Scatter plot having one x (numerical) and one y (numerical) axis.\nsns.regplot(): Regression plot having one x (numerical) and one y (numerical) axis with scatter points and fitted regression line.\n\n\n\nAdditional Libraries\n\nmplfinance: Candlestick charts having one x (time/date) and four y (numerical) axes (open, high, low, close) for financial data with support for moving averages and volume data."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Welcome",
    "section": "Installation",
    "text": "Installation\nPython 3.x is required to use maidr. After installing Python, you can install maidr using the following commands in your terminal:\n# install the latest release from PyPI\npip install -U maidr\n# or install the development version from GitHub\npip install -U git+https://github.com/xability/py-maidr.git"
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Welcome",
    "section": "Getting Started",
    "text": "Getting Started\nMaking accessible data representation with maidr is easy and straightforward. If you already have data visualization code using matplotlib or seaborn, you can make your plots accessible with maidr in just a few lines of code.\nSimply import the maidr package and use the maidr.show() function to display your plots. maidr will automatically generate accessible versions of your plots in your default browser. You can then interact with the accessible versions using keyboard shortcuts (refer to TableÂ 1).\nCheck more examples in the galleries.\n\nSample Bar Plot\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Just import maidr package \nimport maidr \n\n\n# Load the penguins dataset\npenguins = sns.load_dataset(\"penguins\")\n\n# Create a bar plot showing the average body mass of penguins by species\nplt.figure(figsize=(6, 6))\n\n# Assign the plot to a variable \nbar_plot = sns.barplot( \n    x=\"species\", y=\"body_mass_g\", data=penguins, errorbar=\"sd\", palette=\"Blues_d\"\n)\nplt.title(\"Average Body Mass of Penguins by Species\")\nplt.xlabel(\"Species\")\nplt.ylabel(\"Body Mass (g)\")\n\n# plt.show()\n\n# Use maidr.show() to display your plot \nmaidr.show(bar_plot) \n\n# Uncomment the following line to save and share the accessible version of your plot with others!\n# maidr.save_html(bar_plot, \"output.html\")"
  },
  {
    "objectID": "index.html#keyboard-shortcuts-and-controls",
    "href": "index.html#keyboard-shortcuts-and-controls",
    "title": "Welcome",
    "section": "Keyboard Shortcuts and Controls",
    "text": "Keyboard Shortcuts and Controls\nTo interact with the plots using maidr, follow these steps:\n\nPress the Tab key to focus on the plot element.\nUse the arrow keys to move around the plot.\nPress B to toggle Braille mode.\nPress T to toggle Text mode.\nPress S to toggle Sonification (tones) mode.\nPress R to toggle Review mode.\n\nBelow is a detailed list of keyboard shortcuts for various functions:\n\n\n\nTableÂ 1: Keyboard Shortcuts\n\n\n\n\n\n\n\n\n\n\nFunction\nWindows and Linux Key\nMac Key\n\n\n\n\nToggle Braille Mode\nb\nb\n\n\nToggle Text Mode\nt\nt\n\n\nToggle Sonification Mode\ns\ns\n\n\nToggle Review Mode\nr\nr\n\n\nMove around plot\nArrow keys\nArrow keys\n\n\nGo to the very left right up down\nCtrl + Arrow key\nCMD + Arrow key\n\n\nSelect the first element\nCtrl + Home\nCMD + Home\n\n\nSelect the last element\nCtrl + End\nCMD + End\n\n\nRepeat current sound\nSpace\nSpace\n\n\nAuto-play outward in direction of arrow\nCtrl + Shift + Arrow key\nCMD + Shift + Arrow key\n\n\nStop Auto-play\nCtrl\nCtrl\n\n\nAuto-play speed up\nPeriod (.)\nPeriod (.)\n\n\nAuto-play speed down\nComma (,)\nComma (,)\n\n\nAuto-play speed reset\nSlash (/)\nSlash (/)\n\n\nCheck label for the title of current plot\nl t\nl t\n\n\nCheck label for the x axis of current plot\nl x\nl x\n\n\nCheck label for the y axis of current plot\nl y\nl y\n\n\nCheck label for the fill (z) axis of current plot\nl f\nl f\n\n\nSwitch to next layer\nPageUp\nPageUp\n\n\nSwitch to previous layer\nPageDown\nPageDown\n\n\nMove around subplot list\nArrow keys\nArrow keys\n\n\nActivate selected subplot in the list\nEnter\nEnter\n\n\nEscape from current subplot to return to the subplot list\nESC\nESC\n\n\nOpen settings\nCtrl + comma (,)\nCMD + comma (,)\n\n\nOpen Chat View\nQuestion (?)\nQuestion (?)\n\n\nOpen keyboard help\nCtrl + Slash (/)\nCMD + Slash (/)"
  },
  {
    "objectID": "index.html#braille-generation",
    "href": "index.html#braille-generation",
    "title": "Welcome",
    "section": "Braille Generation",
    "text": "Braille Generation\nmaidr incorporates a Braille mode that represents the plot using Braille symbols. This allows users with visual impairments to explore and interact with the plot using a refreshable Braille display. To achieve this, our system translates the plotâs visual elements and data points into a corresponding tactile representation using Braille patterns. For different plot types, such as barplot, boxplot, heatmap, and scatterplot, maidr employs unique encoding strategies tailored to effectively convey the data distribution, patterns, and trends. These tactile encodings range from using distinct Braille characters to represent value ranges, to employing characters that visually resemble the corresponding sections of a plot. By providing a comprehensive Braille representation for various plot types, maidr enables users with visual impairments to gain a deeper understanding of the underlying data and its insights.\n\nBar Plot\nIn the Braille representation of a barplot, data values are encoded as Braille characters based on their relative magnitude within the plot. Low values are denoted by Braille characters that have dots only along the bottom, while high values are indicated by characters that have dots along the top. Given the four height levels of Braille, the encoding is as follows:\n\nâ£ represents values 0 to 25%\nâ ¤ represents the 25% to 50%\nâ  represents the 50% to 75%\nâ  represents the 75% to 100%\n\nThis tactile encoding allows users to easily differentiate between the various value ranges in the barplot, facilitating their understanding of the data distribution and its underlying trends.\n\n\nHistogram\nThe braille representation of a histogram is the same as that of a barplot.\n\n\nLine Plot\nIn the Braille representation of a lineplot, braille is nearly identical to the above barplot: data values are encoded as Braille characters based on their relative magnitude within the plot. Low values are denoted by Braille characters that have dots only along the bottom, while high values are indicated by characters that have dots higher up.\n\n\nHeatmap\nIn the Braille representation of a heatmap, values are depicted based on their relative magnitude within the plot, much like the approach used for barplots and scatterplots. Low values are denoted by Braille characters with dots only along the bottom, high values are represented by characters filled with dots, and blank or null values are indicated by empty spaces. With three height levels of Braille, the encoding is as follows:\n\nâ ¤ represents values from 0% to 33%\nâ  represents values from 33% to 66%\nâ  represents values from 66% to 100%\nââ â (braille space) represents null or empty values\nââ¢³â represents a row separator\n\n\n\nBox Plot\nThe Braille representation of a boxplot employs Braille characters that visually resemble the corresponding sections of the boxplot. An example of such braille may look like â  â â â â â â â ¿â ¸â ¿â  . The size of each section is denoted by the number of Braille characters used. The sections are encoded as follows:\n\nâ  represents lower outlier and upper outlier(s)\nâ  represents the left or right whiskers\nâ ¿ represents the second or third quartiles\nâ ¸â  represents the 50% midpoint (median)\nblank spaces represent empty spaces\n\nWe also impose some overarching rules:\n\nEach section must be represented with at least 1 braille character, assuming they have some positive length.\nDifferences or equalities in whiskers and quartiles must be upheld. That is, if the min and max whisker are of equal length, they must have the same number of braille characters, or if theyâre different, the number of characters must be different.\nZero length sections, such as outliers and the median, are always represented by a set character. â  in the case of outliers, â ¸â  in the case of the median.\n\nThis tactile encoding enables users to discern the various components of the boxplot, allowing them to comprehend the data distribution, detect outliers, and identify central tendencies and dispersion within the dataset.\nTo generate the braille, we use an algorithm that generates a distribution of characters based on a given proportional distribution and a specified total number of characters in the userâs braille display. This can be described mathematically as follows:\n\\[\nc_i = \\text{round}(n \\cdot p_i), \\text{ for } i = 1, 2, 3, \\ldots, k\n\\]\n\\[\nc_i = \\text{round}((n - C) \\cdot p_i), \\text{ for } i = 1, 2, 3, \\ldots, k\n\\]\nWhere\n\nn: Total number of characters (integer)\nC: Total number of length 0 characters to offset the total characters (outliers and median) (integer)\np_i: Proportional distribution of each category i, where i â {1, 2, 3, â¦, k} (real numbers, 0 â¤ p_i â¤ 1, and the sum of all p_i equals 1)\nc_i: Number of characters for each category i (integer)\n\nThe process is as follows in the code:\n\nWe first convert our data set for a particular boxplot to an array of lengths.\nWe then assign the single required character to each section.\nWe also note connected sections, such as min and max.\nWe then normalize and allocate all remaining characters according to their proportional distribution, making sure to add extra characters where needed to keep differences or equalities.\n\nAs an example, consider a boxplot with the following distribution: [10, 0, 20, 40, 30, 0, 30, 60, 50, 30, 0, 10, 0], with types [blank space, outlier, larger blank space, large min whisker, moderate sized lower quartile, the median, moderate sized upper quartile, another larger max whisker, a large blank space, an outlier, a small blank space, then another outlier], and a braille display length of 33. We would produce braille that looks like so:\nâ  â â â â â ¿â ¿â ¿â ¸â â ¿â ¿â ¿â â â â â â  â  â \n\n\nScatter Plot\n\nNote: The line layer in py maidr has not been implemented yet. The following is a placeholder for the future implementation.\n\nIn the Braille representation of a scatterplot, the encoding is performed only for the line layer (layer 2). The method is similar to that used for barplots, wherein data values are represented as Braille characters based on their relative magnitude within the plot. Low values are denoted by dots along the bottom, while high values are indicated by dots along the top. With four height levels of Braille, the encoding is as follows:\n\nâ£ represents values from 0% to 25%\nâ ¤ represents values from 25% to 50%\nâ  represents values from 50% to 75%\nâ  represents values from 75% to 100%\n\n\n\nSegmented Bar Plots\n\nNote: The segmented bar plot in py maidr has not been implemented yet. The following is a placeholder for the future implementation.\n\nStacked bar, dodged bar, and normalized stacked bar all share the same system:\nIn the braille representation of segmented bar plots, braille depends on where you are. There are typically multiple levels to a segmented bar plot, and as you move (Up and Down arrow keys) between levels, the braille changes to represent your current level. At the top, there is also a Summary pseudo level of all levels added together, and a Combined pseudo level of each level separately.\n\nRegular level: Braille appears similar to a bar plot, with braille values corresponding to the magnitude of the levelâs value for this point.\nSummary level: Same as regular level, but values now reflect the combined magnitude of all levelsâ values for this point.\nCombined level: Similar to heatmap, where there are groups of magnitudes for each point separated by a â¢³ character. The first group has braille characters for each level for the first point, then a separator, then the second group has braille characters for each level in the second point, then a separator, and so on."
  },
  {
    "objectID": "index.html#getting-refreshable-braille-display-loaner",
    "href": "index.html#getting-refreshable-braille-display-loaner",
    "title": "Welcome",
    "section": "Getting Refreshable Braille Display Loaner",
    "text": "Getting Refreshable Braille Display Loaner\nIf you are a blind user and do not have a refreshable Braille display, you can request a loaner from the National Library Service (NLS) for the Blind and Print Disabled. Please follow our instruction on how to request an NLS eReader Braille Display."
  },
  {
    "objectID": "index.html#instruction-on-how-to-verify-and-use-the-ai-feature-in-py-maidr",
    "href": "index.html#instruction-on-how-to-verify-and-use-the-ai-feature-in-py-maidr",
    "title": "Welcome",
    "section": "Instruction on How to Verify and Use the AI Feature in py-maidr",
    "text": "Instruction on How to Verify and Use the AI Feature in py-maidr\nWe provide AI API keys only to alpha testers who have shared their email addresses through our survey form. If you are not an alpha tester, you can still use the AI feature by manually providing your own AI API keys in the Help menu.\n\nFor Alpha Testers\n\nActivate the maidr plot by pressing the Tab key or clicking on the plot area.\nIn the interactive plot area, press H to open the Help menu.\nLocate the text field labeled âEnter your email addressâ.\nType your email address in the text field. Note: The email address must match the one you provided in the survey form.\nPress Enter to submit your email address.\nWait for the confirmation message to appear on the screen.\nPress Enter to close the confirmation message.\nSelect up to two AI models from the checkboxes. Supported models include:\n\nOpenAI GPT-4o\nGoogle Gemini 2.0 Flash Experimental\nAnthropic Claude 3.5 Sonnet\n\n\n\nNote: All provided models are the latest versions.\n\n\nClick the Save and Close button.\nCheck your email inbox for a verification email from maidr.ai.\nOpen the verification email and click on the verification link.\nOnce verified, return to the interactive plot area and press Ctrl+Shift+/ (forward slash) or Alt+Shift+/ (on Mac) to open the AI modal. You can now chat with the selected AI models about your plot.\n\n\nNote: The AI Chat modal is togglable. Use the same key combination to switch between the plot and the AI Chat modal.\n\n\n\nFor All Other Users\nYou can manually provide your own AI API keys in the Help menu. These keys are not saved and are only used for the current session. This means you will need to re-enter your API keys each time you open the app.\n\nActivate the maidr plot by pressing the Tab key or clicking on the plot area.\nIn the interactive plot area, press H to open the Help menu.\nSelect up to two AI models from the checkboxes. Supported models include:\n\nOpenAI GPT-4o\nGoogle Gemini 2.0 Flash Experimental\nAnthropic Claude 3.5 Sonnet\n\n\n\nNote: All provided models are the latest versions.\n\n\nEnter your API keys in the respective text fields.\nClick the Save and Close button.\nReturn to the interactive plot area and press Ctrl+Shift+/ (forward slash) or Alt+Shift+/ (on Mac) to open the AI modal. You can now chat with the selected AI models about your plot.\n\n\nNote: The AI Chat modal is togglable. Use the same key combination to switch between the plot and the AI Chat modal."
  },
  {
    "objectID": "index.html#bug-report",
    "href": "index.html#bug-report",
    "title": "Welcome",
    "section": "Bug Report",
    "text": "Bug Report\nIf you encounter a bug, have usage questions, or want to share ideas to make this package better, please feel free to file an issue."
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "Welcome",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nPlease note that the maidr project is released with a contributor code of conduct.By participating in this project you agree to abide by its terms."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Welcome",
    "section": "ð License",
    "text": "ð License\nmaidr is licensed under the GPL3 license.\nÂ© (x)Ability Design Lab."
  },
  {
    "objectID": "index.html#governance",
    "href": "index.html#governance",
    "title": "Welcome",
    "section": "ðï¸ Governance",
    "text": "ðï¸ Governance\nThis project is primarily maintained by JooYoung Seo and Saairam Venkatesh. Other authors may occasionally assist with some of these duties."
  }
]